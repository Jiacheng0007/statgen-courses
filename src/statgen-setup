#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[global]
# List of tutorials to launch
# see https://hub.docker.com/u/statisticalgenetics/ for a list of options
parameter: tutorials = []
parameter: my_name = 'hub_user'

import socket
def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

[launch_1]
output: "~/.cache/cull_idle_servers.py", "~/.cache/jupyterhub_config.py"
bash:
    docker pull gaow/base-notebook
    mkdir -p $HOME/.cache
    curl -fsSL https://raw.githubusercontent.com/statgenetics/statgen-courses/master/src/cull_idle_servers.py -o $HOME/.cache/cull_idle_servers.py
    curl -fsSL https://raw.githubusercontent.com/statgenetics/statgen-courses/master/src/jupyterhub_config.py -o $HOME/.cache/jupyterhub_config.py

[launch_2]
fail_if(len(tutorials) == 0, msg = 'Please specify a list of tutorials to launch, via ``--tutorials`` option.')
fail_if(len(my_name) == 0, msg = 'Please assign yourself a username, via ``--my-name`` option.')
fail_if(not all((a.isalnum() or a == '_') and not a.isspace() for a in my_name), msg = 'Please use only alphanumeric letters and no space for ``--my-name`` input.')
input: for_each = 'tutorials', concurrent = False
docker_build: tag = f'{_tutorials}_{my_name}', expand = True, workdir = '~/.cache'
    FROM gaow/base-notebook
    USER root
    RUN mkdir -p /srv/jupyterhub/
    COPY jupyterhub_config.py /srv/jupyterhub/jupyterhub_config.py
    COPY cull_idle_servers.py /srv/jupyterhub/cull_idle_servers.py
    # modify the script to create a unique instance
    RUN sed -i 's/CONTAINER_NAME/{_tutorials}_{my_name}/g; s/IMAGE_NAME/statisticalgenetics\/{_tutorials}/g; s/HOST_DIR/\/root\/{my_name}/g' /srv/jupyterhub/jupyterhub_config.py
    EXPOSE 8000
    WORKDIR /srv/jupyterhub/
    LABEL org.jupyter.service="jupyterhub"
    CMD ["jupyterhub"]

[launch_3]
depends: executable('setfacl')
import random
all_ports = list(range(1001, 8888))
random.shuffle(all_ports)
ports = []
for idx, item in enumerate(all_ports):
    if not is_port_in_use(item):
        ports.append(item)
    if len(ports) >= len(tutorials):
        break
from sos.utils import get_output
ip = get_output("hostname -I | awk '{print $1}'").strip()
#
input: for_each = 'tutorials', concurrent = False
bash: expand = True, workdir = '~/'
    # Get the relevant image
    docker pull statisticalgenetics/{_tutorials}
    # Stop currently running instances to start from scratch
    docker container stop $(docker container ls -q --filter ancestor=statisticalgenetics/{_tutorials}) &> /dev/null || true
    docker container stop $(docker container ls -q --filter name={_tutorials}_{my_name}) &> /dev/null || true
    # Create a user folder for notebook instance and set the permission
    ## https://github.com/jupyterhub/dockerspawner/issues/160
    ## FIXME: there may be smarter solutions but this is what I have so far
    mkdir -p $HOME/{my_name} && chown 1000:100 $HOME/{my_name} && chmod g+rws $HOME/{my_name} && setfacl -d -m g::rwx $HOME/{my_name}
    # Start jupyterhub
    docker network inspect {_tutorials}_{my_name} &>/dev/null || docker network create {_tutorials}_{my_name}
    docker run --rm -it -d -v /var/run/docker.sock:/var/run/docker.sock --net {_tutorials}_{my_name} --name {_tutorials}_{my_name} -p{ports[_index]}:8000 {_tutorials}_{my_name}
    # Create a shortcut to access from browser
    echo '<meta http-equiv="Refresh" content="0; url=http://{ip}:{ports[_index]}" />' > /var/www/html/{_tutorials}.html

[clean]
bash:
    docker stop $(docker ps -a -q) || true
    docker rm $(docker ps -a -q) || true
    docker rmi $(docker images -f "dangling=true" -q) || true
